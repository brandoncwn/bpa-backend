# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  #azureSubscription: <name of your service connection>
  #projectName: <unique project name>
  #resourceGroupName: <existing resource group>
  #location: <region ex: eastus>

  functionAppName: '$(projectName)'
  environmentName: '$(projectName)'
  vmImageName: 'ubuntu-latest'
  azureServiceConnection: $(azureSubscription)
  templateFile: 'templates/main.bicep'
  deploymentOutputs: ''
  deployment_token: ''

stages:

- stage: Infra
  displayName: Infra stage
  jobs:
  - job: Infra
    displayName: Infra
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: self
      submodules: 'true'

    - bash: az bicep build --file $(templateFile)
      displayName: 'Compile Bicep to ARM'

    - task: AzureResourceManagerTemplateDeployment@3
      name: DeployStaticWebAppInfra
      displayName: Deploy Static Web App infra
      inputs:
        deploymentScope: Resource Group
        azureResourceManagerConnection: $(azureSubscription)
        action: Create Or Update Resource Group
        location: $(resourceGroupName)
        resourceGroupName: $(resourceGroupName)
        templateLocation: Linked artifact
        overrideParameters: >-
          -location $(location)
          -projectName $(projectName)
        csmFile: 'templates/main.json' # created by bash script
        deploymentMode: Incremental
        deploymentOutputs: deploymentOutputs

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "deployment Outputs: $(deploymentOutputs)"
        

    - task: PowerShell@2
      name: 'SetDeploymentOutputVariables'
      displayName: 'Set Deployment Output Variables'
      inputs:
        targetType: inline
        script: |
          $armOutputObj = '$(deploymentOutputs)' | ConvertFrom-Json
          $armOutputObj.PSObject.Properties | ForEach-Object {
            $keyname = $_.Name
            $value = $_.Value.value

            # Creates a standard pipeline variable
            Write-Output "##vso[task.setvariable variable=$keyName;issecret=false]$value"

            # Display keys in pipeline
            Write-Output "output variable: $keyName $value"
          }
        pwsh: true

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "deployment Outputs2: $(deploymentOutputs)"
          echo "deployment Outputs2: $(deployment_token)"

    - task: AzureStaticWebApp@0
      inputs:
        app_location: './ui'
        api_location: ''
        output_location: './out'
        azure_static_web_apps_api_token: $(deployment_token)




    #- task: AzureCLI@2
    #  inputs:
    #    azureSubscription: $(azureServiceConnection)
    #    scriptType: bash
    #    scriptLocation: inlineScript
    #    inlineScript: |
    #      az --version
    #      az group create --name $(resourceGroupName) --location $(location)
    #      az deployment group create --resource-group $(resourceGroupName) --template-file $(templateFile) --parameters projectName=$(projectName) location=$(location)



- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      displayName: 'Build extensions'
    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'Prepare binaries'
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Functions App Deploy: $(projectName)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'





